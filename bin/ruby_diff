#!/usr/bin/env ruby
require 'rubygems'
require 'optparse'
require 'enumerator'

# If we're loading ruby_diff directly for development,
# don't require it through rubygems.  Is there a better
# way to do this?

if $0 == __FILE__
  # loaded directly (dev)
  require File.dirname(__FILE__)+"/../lib/ruby_diff"
else
  # loaded via ruby_gems
  require 'ruby_diff'
end

@options = {}

feeder_mapping = {
  :file =>  FileFeeder,
  :git  =>  GitFeeder
}

feeders = []

opts = OptionParser.new   
opts.banner = "Usage: ruby_diff.rb [options]"

opts.separator ""
opts.separator "Specific options:"

opts.define_head <<-HEAD

Examples:
Changes between git HEAD and current file system:
ruby_diff --git HEAD --file ./

Changes between HEAD and previous revision:
ruby_diff --git HEAD~1 --git HEAD
HEAD

opts.on('--sexp', "Show the s expressions for each input (mostly for debugging)"){ 
  @options[:sexp] = true 
}

opts.on('--verbose', "Shows more information while processing files"){ 
  @options[:verbose] = true 
}

opts.on('--git PATH', "Use a git repository as a code source"){|path| 
  feeders << feeder_mapping[:git].new(path) 
}
opts.on('--file PATH', "Use a file system path as a code source"){|path| 
  feeders << feeder_mapping[:file].new(path) 
}

opts.on_tail('-v', '--version')    { puts "ruby_diff v:0" ; exit }
opts.on_tail('-h', '--help')       { puts opts; exit }

opts.parse!(ARGV)

# Map remaining options as file feeders
ARGV.each do |path|
  feeders << feeder_mapping[:file].new(path)
end

if feeders.length < 2
  puts opts
  puts "Must supply at least 2 code sources (found #{feeders.length})"
  exit 1
end

processors = feeders.map do |feeder|
  puts "#{feeder.class}: #{feeder.path}" if @options[:sexp]
  processor = StructureProcessor.new(feeder.path)
  puts "\n#{feeder.path}" if @options[:verbose]
  
  feeder.each do |code, path|
    puts path if @options[:verbose]
    begin
      sexp = ParseTree.new.parse_tree_for_string(code,path)
      if @options[:sexp]
        pp sexp
        puts "--"
      end
    
      processor.process(*sexp) unless sexp.empty?
    rescue Exception => ex
      STDERR << "Could not parse input (#{path}):\n#{ex}"
    end
  end
  
  processor
end


processors.each_cons(2) do |old_processor, new_processor|
  if processors.length > 2 or @options[:verbose]
    puts "# #{old_processor.name} to #{new_processor.name}"
  end
  changes = old_processor.diff(new_processor).sort_by{|c| c.signature}
  changes.each do |change|
    puts change.to_s
  end
end